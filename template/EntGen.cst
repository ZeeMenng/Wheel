<%@ CodeTemplate Inherits="CodeTemplate" TargetLanguage="java" Language="C#" Description="NetTiers main template." Debug="True" ResponseEncoding="UTF-8" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CustomCodeSmithHelper" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CustomCodeSmithHelper" %>

<%-- 要打印的表 --%>
<%@ Property Name="Table" Type="TableSchema" DeepLoad="True" Optional="False" Category="01. Getting Started - Required"Description="Database that the tables views, and stored procedures shouldbe based on. IMPORTANT!!! If SourceTables and SourceViews are left blank, theEntire Database will then be generated." %>
<%@ Property Name="DeveloperName" Type="String" Category="Context" Description="The name to include in the comment header" %>
<%@ Property Name="ModulePackageName" Type="String" Category="Context" Description="The name to include in the comment header" %>

package com.zee.ent.generate.<%=ModulePackageName%>;

import java.io.Serializable;
import java.math.BigDecimal;

import java.util.*;
import io.swagger.annotations.ApiModelProperty;

import com.zee.ent.base.BaseEnt;
<%
ColumnSchemaCollection columns = Table.Columns;
ColumnNameComparer com = new ColumnNameComparer();
columns.Sort(com);
TableKeySchemaCollection keyCol = Table.Keys;
keyCol.Sort(new TableKeyNameComparer());
foreach (TableKeySchema tks in keyCol){
if (tks.ForeignKeyTable.Name != Table.Name){
%>
import com.zee.ent.extend.<%=ModulePackageName%>.<%=StringUtil.ToPascalCase(tks.ForeignKeyTable.Name)%>;
<% 
}
if (tks.PrimaryKeyTable.Name != Table.Name) {
%> 
import com.zee.ent.extend.<%=ModulePackageName%>.<%=StringUtil.ToPascalCase(tks.PrimaryKeyTable.Name)%>;
<%
}
if (tks.PrimaryKeyTable.Name==tks.ForeignKeyTable.Name){
%>
import com.zee.ent.extend.<%=ModulePackageName%>.<%=StringUtil.ToPascalCase(tks.PrimaryKeyTable.Name)%>;
<%}}
%>



/**
 * @author <%= DeveloperName%>
 * @createDate 2017/05/18 14:54:22
 * @updateDate <%= DateTime.Now %>
 * @description 实体类<%=StringUtil.ToPascalCase(Table.Name)%>GenEnt，自动生成。<%=Table.Description%>
 */

public class <%=StringUtil.ToPascalCase(Table.Name)%>GenEnt extends BaseEnt implements Serializable {
    
    private static final long serialVersionUID = 1L;
<%

        for(int i=0;i<columns.Count;i++){
            ColumnSchema col =columns[i];
            Response.WriteLine(JavaUtility.GetApiModelProperty(col));
            Response.WriteLine(JavaUtility.GetPrivateProperty(col));  
        }
%> 

   //本表做为子表时，父表实体对象
<%             
        foreach (TableKeySchema tks in keyCol) {

           if (tks.PrimaryKeyTable.Name != Table.Name) {
%>                                                          
    private  <%=StringUtil.ToPascalCase(tks.PrimaryKeyTable.Name)%> <%=StringUtil.ToCamelCase(tks.PrimaryKeyTable.Name)%>;
<%
            }
        }
%>

    //本表做为父表时，子表数据列表
<%
        foreach (TableKeySchema tks in keyCol) {
            if (tks.ForeignKeyTable.Name != Table.Name) {
%>
    private ArrayList<<%=StringUtil.ToPascalCase(tks.ForeignKeyTable.Name)%>> <%=StringUtil.ToCamelCase(tks.ForeignKeyTable.Name)+"List"%>;   
<% 
            }
        }
%>

    //父子表均为自身时
<%
        foreach (TableKeySchema tks in keyCol) {
            if (tks.PrimaryKeyTable.Name==tks.ForeignKeyTable.Name) {

%>
    private  <%=StringUtil.ToPascalCase(tks.PrimaryKeyTable.Name)%> <%=StringUtil.ToCamelCase(tks.PrimaryKeyTable.Name)%>;
    private ArrayList<<%=StringUtil.ToPascalCase(tks.ForeignKeyTable.Name)%>> <%=StringUtil.ToCamelCase(tks.ForeignKeyTable.Name)+"List"%>;   
<% 
                break;
            }
        }
%>


<%
        for(int i=0;i<columns.Count;i++){
            ColumnSchema col =columns[i];
%>
	/**
	 * get方法。<%=col.Description%>
	 */
	public <%=JavaUtility.DataType2JavaType(col.DataType)%> get<%=StringUtil.ToPascalCase(col.Name)%>() {
		return this.<%=StringUtil.ToCamelCase(col.Name)%>;
	}

	/**
	 * set方法。<%=col.Description%>
	 */
	public void set<%=StringUtil.ToPascalCase(col.Name)%>(<%=JavaUtility.DataType2JavaType(col.DataType)%> <%=StringUtil.ToCamelCase(col.Name)%>) {
		this.<%=StringUtil.ToCamelCase(col.Name)%> = <%=StringUtil.ToCamelCase(col.Name)%>;
	}
    
<% }%>



<%
        foreach (TableKeySchema tks in keyCol) {
            if (tks.ForeignKeyTable.Name != Table.Name) {
%>
	/**
	 * get方法。本表做为父表时，子表实体对象。<%=tks.ForeignKeyTable.Description%>
	 */
	public ArrayList<<%=StringUtil.ToPascalCase(tks.ForeignKeyTable.Name)%>> get<%=StringUtil.ToPascalCase(tks.ForeignKeyTable.Name)%>List() {
		return this.<%=StringUtil.ToCamelCase(tks.ForeignKeyTable.Name)%>List;
	}

	/**
	 * set方法。本表做为父表时，子表实体对象。<%=tks.ForeignKeyTable.Description%>
	 */
	public void set<%=StringUtil.ToPascalCase(tks.ForeignKeyTable.Name)%>List(ArrayList<<%=StringUtil.ToPascalCase(tks.ForeignKeyTable.Name)%>> <%=StringUtil.ToCamelCase(tks.ForeignKeyTable.Name)%>List) {
		this.<%=StringUtil.ToCamelCase(tks.ForeignKeyTable.Name)%>List = <%=StringUtil.ToCamelCase(tks.ForeignKeyTable.Name)%>List;
	}

<% 
            }
        }
%> 



<%
        foreach (TableKeySchema tks in keyCol) {
            if (tks.PrimaryKeyTable.Name != Table.Name) {
%>
	/**
	 * get方法。本表做为子表时，父表实体对象。<%=tks.PrimaryKeyTable.Description%>
	 */
	public <%=StringUtil.ToPascalCase(tks.PrimaryKeyTable.Name)%> get<%=StringUtil.ToPascalCase(tks.PrimaryKeyTable.Name)%>() {
		return this.<%=StringUtil.ToCamelCase(tks.PrimaryKeyTable.Name)%>;
	}

	/**
	 * set方法。本表做为子表时，父表实体对象。<%=tks.PrimaryKeyTable.Description%>
	 */
	public void set<%=StringUtil.ToPascalCase(tks.PrimaryKeyTable.Name)%>(<%=StringUtil.ToPascalCase(tks.PrimaryKeyTable.Name)%> <%=StringUtil.ToCamelCase(tks.PrimaryKeyTable.Name)%>) {
		this.<%=StringUtil.ToCamelCase(tks.PrimaryKeyTable.Name)%> = <%=StringUtil.ToCamelCase(tks.PrimaryKeyTable.Name)%>;
	}

<% 
            }
        }
%> 



<%
        foreach (TableKeySchema tks in keyCol) {
            if (tks.PrimaryKeyTable.Name==tks.ForeignKeyTable.Name) {
%>
	/**
	 * get方法。父子表均为自身时，父表实体对象。<%=tks.PrimaryKeyTable.Description%>
	 */
	public <%=StringUtil.ToPascalCase(tks.PrimaryKeyTable.Name)%> get<%=StringUtil.ToPascalCase(tks.PrimaryKeyTable.Name)%>() {
		return this.<%=StringUtil.ToCamelCase(tks.PrimaryKeyTable.Name)%>;
	}

	/**
	 * set方法。父子表均为自身时，父表实体对象。<%=tks.PrimaryKeyTable.Description%>
	 */
	public void set<%=StringUtil.ToPascalCase(tks.PrimaryKeyTable.Name)%>(<%=StringUtil.ToPascalCase(tks.PrimaryKeyTable.Name)%> <%=StringUtil.ToCamelCase(tks.PrimaryKeyTable.Name)%>) {
		this.<%=StringUtil.ToCamelCase(tks.PrimaryKeyTable.Name)%> = <%=StringUtil.ToCamelCase(tks.PrimaryKeyTable.Name)%>;
	}


	/**
	 * get方法。父子表均为自身时，子表实体对象。<%=tks.PrimaryKeyTable.Description%>
	 */
	public ArrayList<<%=StringUtil.ToPascalCase(tks.ForeignKeyTable.Name)%>> get<%=StringUtil.ToPascalCase(tks.ForeignKeyTable.Name)%>List() {
		return this.<%=StringUtil.ToCamelCase(tks.ForeignKeyTable.Name)%>List;
	}

	/**
	 * set方法。父子表均为自身时，子表实体对象。<%=tks.PrimaryKeyTable.Description%>
	 */
	public void set<%=StringUtil.ToPascalCase(tks.ForeignKeyTable.Name)%>List(ArrayList<<%=StringUtil.ToPascalCase(tks.ForeignKeyTable.Name)%>> <%=StringUtil.ToCamelCase(tks.ForeignKeyTable.Name)%>List) {
		this.<%=StringUtil.ToCamelCase(tks.ForeignKeyTable.Name)%>List = <%=StringUtil.ToCamelCase(tks.ForeignKeyTable.Name)%>List;
	}

<% 
                break;
            }
        }
%>

}







