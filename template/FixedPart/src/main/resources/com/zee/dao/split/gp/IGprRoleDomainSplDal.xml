<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zee.dao.split.gp.IGprRoleDomainSplDal">

	<resultMap id="BaseResultMap" type="com.zee.ent.extend.gp.GprRoleDomain">
		<id column="id" property="id" jdbcType="VARCHAR" />
		<result column="role_id" property="roleId" jdbcType="VARCHAR" />
		<result column="domain_id" property="domainId" jdbcType="VARCHAR" />
		<result column="is_enable_code" property="isEnableCode" jdbcType="TINYINT" />
	</resultMap>

	<sql id="Base_Column_List">
		id,role_id,domain_id,is_enable_code
	</sql>

	<insert id="add" parameterType="com.zee.ent.extend.gp.GprRoleDomain">
		insert into gpr_role_domain
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null and id != '' ">
				id,
			</if>

			<if test="roleId != null and roleId != '' ">
				role_id,
			</if>

			<if test="domainId != null and domainId != '' ">
				domain_id,
			</if>

			<if test="isEnableCode != null ">
				is_enable_code,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null and id != '' ">
				#{id,jdbcType=VARCHAR},
			</if>
			<if test="roleId != null and roleId != '' ">
				#{roleId,jdbcType=VARCHAR},
			</if>
			<if test="domainId != null and domainId != '' ">
				#{domainId,jdbcType=VARCHAR},
			</if>
			<if test="isEnableCode != null ">
				#{isEnableCode,jdbcType=TINYINT},
			</if>
		</trim>
	</insert>


	<insert id="addList" parameterType="list">
		insert into gpr_role_domain
		<trim prefix="(" suffix=")">
			<include refid="Base_Column_List" />
		</trim>
		values
		<foreach collection="list" item="gprRoleDomain" index="index" separator=",">
			<trim prefix="(" suffix=")" suffixOverrides=",">


				#{gprRoleDomain.id,jdbcType=VARCHAR},


				#{gprRoleDomain.roleId,jdbcType=VARCHAR},


				#{gprRoleDomain.domainId,jdbcType=VARCHAR},


				#{gprRoleDomain.isEnableCode,jdbcType=TINYINT},


			</trim>
		</foreach>
	</insert>



	<delete id="delete" parameterType="java.lang.String">
		delete  gpr_role_domain,gpr_domain_user from gpr_role_domain left join gpr_domain_user on gpr_role_domain.domain_id=gpr_domain_user.domain_id
		where gpr_role_domain.id = #{id,jdbcType=VARCHAR}
	</delete>

	<delete id="deleteByIdList" parameterType="list">
		delete  gpr_role_domain,gpr_domain_user from gpr_role_domain left join gpr_domain_user on gpr_role_domain.domain_id=gpr_domain_user.domain_id
		where gpr_role_domain.id in
		<foreach collection="list" item="id " index="index" open="(" close=")" separator=",">
			#{id }
		</foreach>
	</delete>


	<delete id="deleteByRoleId" parameterType="java.lang.String">
		delete  gpr_role_domain,gpr_domain_user from gpr_role_domain left join gpr_domain_user on gpr_role_domain.domain_id=gpr_domain_user.domain_id
		where gpr_role_domain.role_id = #{roleId,jdbcType=VARCHAR}
	</delete>
	<delete id="deleteByRoleIdList" parameterType="list">
		delete  gpr_role_domain,gpr_domain_user from gpr_role_domain left join gpr_domain_user on gpr_role_domain.domain_id=gpr_domain_user.domain_id
		where gpr_role_domain.role_id in
		<foreach collection="list" item="roleId" index="index" open="(" close=")" separator=",">
			#{roleId }
		</foreach>
	</delete>
	<delete id="deleteByDomainId" parameterType="java.lang.String">
		delete  gpr_role_domain,gpr_domain_user from gpr_role_domain left join gpr_domain_user on gpr_role_domain.domain_id=gpr_domain_user.domain_id
		where gpr_role_domain.domain_id = #{domainId,jdbcType=VARCHAR}
	</delete>
	<delete id="deleteByDomainIdList" parameterType="list">
		delete  gpr_role_domain,gpr_domain_user from gpr_role_domain left join gpr_domain_user on gpr_role_domain.domain_id=gpr_domain_user.domain_id
		where gpr_role_domain.domain_id in
		<foreach collection="list" item="domainId" index="index" open="(" close=")" separator=",">
			#{domainId}
		</foreach>
	</delete>



	<update id="update" parameterType="com.zee.ent.extend.gp.GprRoleDomain">
		update gpr_role_domain
		<set>
			<if test="roleId != null  and roleId != '' ">
				role_id = #{roleId,jdbcType=VARCHAR},
			</if>
			<if test="domainId != null  and domainId != '' ">
				domain_id = #{domainId,jdbcType=VARCHAR},
			</if>
			<if test="isEnableCode != null ">
				is_enable_code = #{isEnableCode,jdbcType=TINYINT},
			</if>
		</set>
		where id = #{id,jdbcType=VARCHAR}
	</update>

	<update id="updateList">
		update gpr_role_domain
		<set>
			<if test="t.roleId != null  and t.roleId != '' ">
				role_id = #{t.roleId,jdbcType=VARCHAR},
			</if>
			<if test="t.domainId != null  and t.domainId != '' ">
				domain_id = #{t.domainId,jdbcType=VARCHAR},
			</if>
			<if test="t.isEnableCode != null ">
				is_enable_code = #{t.isEnableCode,jdbcType=TINYINT},
			</if>
		</set>

		where id in
		<foreach collection="idList" item="id " index="index" open="(" close=")" separator=",">
			#{id }
		</foreach>
	</update>

	<select id="getModel" resultMap="BaseResultMap" parameterType="java.lang.String">
		select
		<include refid="Base_Column_List" />
		from gpr_role_domain
		where id = #{id,jdbcType=VARCHAR}
	</select>

	<select id="getList" resultMap="BaseResultMap" parameterType="map">
		select
		<include refid="Base_Column_List" />
		from gpr_role_domain where 1 = 1
		<if test="EntityRelated.id != null and EntityRelated.id != '' ">
			and id LIKE CONCAT('%',#{EntityRelated.id,jdbcType=VARCHAR},'%')
		</if>

		<if test="EntityRelated.domainId != null and EntityRelated.domainId != '' ">
			and domain_id = #{EntityRelated.domainId,jdbcType=VARCHAR}
		</if>
		<if test="EntityRelated.id != null and EntityRelated.id != '' ">
			and id = #{EntityRelated.id,jdbcType=VARCHAR}
		</if>
		<if test="EntityRelated.isEnableCode != null">
			and is_enable_code = #{EntityRelated.isEnableCode,jdbcType=TINYINT}
		</if>
		<if test="EntityRelated.roleId != null and EntityRelated.roleId != '' ">
			and role_id = #{EntityRelated.roleId,jdbcType=VARCHAR}
		</if>


		<if test="OrderList != null and OrderList!=null">
			order by
			<foreach collection="OrderList" item="Order" index="index" separator=",">
				${Order.columnName}
				<if test="Order.isASC">
					ASC
				</if>
				<if test="!Order.isASC">
					DESC
				</if>
			</foreach>
		</if>
	</select>

	<select id="getListBySQL" resultType="java.util.HashMap" parameterType="String">
		<if test="value!=null and value!=''">
			${value}
		</if>
	</select>

	<cache />
</mapper>