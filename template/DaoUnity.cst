<%@ CodeTemplate Inherits="CodeTemplate" TargetLanguage="java" Language="C#" Description="NetTiers main template." Debug="True" ResponseEncoding="UTF-8" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CustomCodeSmithHelper" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CustomCodeSmithHelper" %>

<%-- 要打印的表 --%>
<%@ Property Name="Table" Type="TableSchema" DeepLoad="True" Optional="False" Category="01. Getting Started - Required"Description="Database that the tables views, and stored procedures shouldbe based on. IMPORTANT!!! If SourceTables and SourceViews are left blank, theEntire Database will then be generated." %>
<%@ Property Name="DeveloperName" Type="String" Category="Context" Description="The name to include in the comment header" %>
<%@ Property Name="ModulePackageName" Type="String" Category="Context" Description="The name to include in the comment header" %>

package com.zee.dao.unity.<%=ModulePackageName%>;

import java.util.List;
import com.zee.dao.unity.base.IBaseUntDal;
import com.zee.ent.extend.<%=ModulePackageName%>.<%=StringUtil.ToPascalCase(Table.Name)%>;
<%
ColumnSchemaCollection columns = Table.Columns;
ColumnNameComparer com = new ColumnNameComparer();
columns.Sort(com);
TableKeySchemaCollection keyCol = Table.Keys;
keyCol.Sort(new TableKeyNameComparer());
foreach (TableKeySchema tks in keyCol){
if (tks.ForeignKeyTable.Name != Table.Name){
%>
import com.zee.ent.extend.<%=ModulePackageName%>.<%=StringUtil.ToPascalCase(tks.ForeignKeyTable.Name)%>;
<% 
}
if (tks.PrimaryKeyTable.Name != Table.Name) {
%> 
import com.zee.ent.extend.<%=ModulePackageName%>.<%=StringUtil.ToPascalCase(tks.PrimaryKeyTable.Name)%>;
<%
}
if (tks.PrimaryKeyTable.Name==tks.ForeignKeyTable.Name){
%>
import com.zee.ent.extend.<%=ModulePackageName%>.<%=StringUtil.ToPascalCase(tks.PrimaryKeyTable.Name)%>;
<%}}
%>




/**
 * @author <%= DeveloperName%>
 * @createDate 2017/05/22 14:01:29
 * @updateDate <%= DateTime.Now %>
 * @description 扩展自实体类IBaseUntDal<<%=StringUtil.ToPascalCase(Table.Name)%>>，可手动更改。<%=Table.Description%>
 */

public interface I<%=StringUtil.ToPascalCase(Table.Name)%>UntDal extends IBaseUntDal<<%=StringUtil.ToPascalCase(Table.Name)%>> {

<%
int foreignKeyCount=0;
for (int i = 0; i<Table.Keys.Count; i++) {

    TableSchema parentTable = Table.Keys[i].PrimaryKeyTable;

    TableSchema clildTable = Table.Keys[i].ForeignKeyTable;
    ColumnSchema childCoumn = Table.Keys[i].ForeignKeyMemberColumns[0].Column;
        //逻辑只处理子表中的记录，不处理父表。同时排除一对一时主键即外键的情况
        if (Table.Name != parentTable.Name &&childCoumn.Name!=Table.PrimaryKey.MemberColumns[0].Name) {
            foreignKeyCount++;
 %>
 
	public int deleteBy<%=StringUtil.ToPascalCase(childCoumn.Name)%>(String  <%=StringUtil.ToCamelCase(childCoumn.Name)%>);
    
    public int deleteBy<%=StringUtil.ToPascalCase(childCoumn.Name)%>List(List<String> <%=StringUtil.ToCamelCase(childCoumn.Name)%>List);

	public List<<%=StringUtil.ToPascalCase(clildTable.Name)%>> getListBy<%=StringUtil.ToPascalCase(childCoumn.Name)%>(String  <%=StringUtil.ToCamelCase(childCoumn.Name)%>);
<%
}}

   
   
//如果外键个数大于1个，则生成根据外键删除的方法
 if(foreignKeyCount>1) {%>
        
	public int deleteByCompositeIdList(List<<%=StringUtil.ToPascalCase(Table.Name)%>> <%=StringUtil.ToCamelCase(Table.Name)%>List);   
<% 
}
%>
   
<%foreach(ColumnSchema col in Table.Columns){ 
  if(col.IsUnique&&(!col.IsPrimaryKeyMember)){
%> 

	public int deleteBy<%=StringUtil.ToPascalCase(col.Name)%>(String  <%=StringUtil.ToCamelCase(col.Name)%> );

	public <%=StringUtil.ToPascalCase(Table.Name)%> getModelBy<%=StringUtil.ToPascalCase(col.Name)%>(String  <%=StringUtil.ToCamelCase(col.Name)%> );

	public int isUnique<%=StringUtil.ToPascalCase(col.Name)%>(String  <%=StringUtil.ToCamelCase(col.Name)%>);
  
<%}}%>

   
}






